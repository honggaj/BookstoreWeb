/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { BookResponseListResultCustomModel } from '../../models/book-response-list-result-custom-model';

export interface ApiBookAdvancedSearchGet$Plain$Params {
  keyword?: string;
  genreId?: number;
  minPrice?: number;
  maxPrice?: number;
  publishedAfter?: string;
  sortBy?: string;
  ascending?: boolean;
}

export function apiBookAdvancedSearchGet$Plain(http: HttpClient, rootUrl: string, params?: ApiBookAdvancedSearchGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<BookResponseListResultCustomModel>> {
  const rb = new RequestBuilder(rootUrl, apiBookAdvancedSearchGet$Plain.PATH, 'get');
  if (params) {
    rb.query('keyword', params.keyword, {});
    rb.query('genreId', params.genreId, {});
    rb.query('minPrice', params.minPrice, {});
    rb.query('maxPrice', params.maxPrice, {});
    rb.query('publishedAfter', params.publishedAfter, {});
    rb.query('sortBy', params.sortBy, {});
    rb.query('ascending', params.ascending, {});
  }

  return http.request(
    rb.build({ responseType: 'text', accept: 'text/plain', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<BookResponseListResultCustomModel>;
    })
  );
}

apiBookAdvancedSearchGet$Plain.PATH = '/api/Book/AdvancedSearch';
