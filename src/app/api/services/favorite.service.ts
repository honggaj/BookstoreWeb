/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiFavoriteAddPost } from '../fn/favorite/api-favorite-add-post';
import { ApiFavoriteAddPost$Params } from '../fn/favorite/api-favorite-add-post';
import { apiFavoriteDeleteByUserBookDelete } from '../fn/favorite/api-favorite-delete-by-user-book-delete';
import { ApiFavoriteDeleteByUserBookDelete$Params } from '../fn/favorite/api-favorite-delete-by-user-book-delete';
import { apiFavoriteDeleteIdDelete } from '../fn/favorite/api-favorite-delete-id-delete';
import { ApiFavoriteDeleteIdDelete$Params } from '../fn/favorite/api-favorite-delete-id-delete';
import { apiFavoriteGet } from '../fn/favorite/api-favorite-get';
import { ApiFavoriteGet$Params } from '../fn/favorite/api-favorite-get';
import { apiFavoriteUserUserIdGet } from '../fn/favorite/api-favorite-user-user-id-get';
import { ApiFavoriteUserUserIdGet$Params } from '../fn/favorite/api-favorite-user-user-id-get';

@Injectable({ providedIn: 'root' })
export class FavoriteService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiFavoriteGet()` */
  static readonly ApiFavoriteGetPath = '/api/Favorite';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFavoriteGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteGet$Response(params?: ApiFavoriteGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiFavoriteGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFavoriteGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteGet(params?: ApiFavoriteGet$Params, context?: HttpContext): Observable<void> {
    return this.apiFavoriteGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiFavoriteUserUserIdGet()` */
  static readonly ApiFavoriteUserUserIdGetPath = '/api/Favorite/User/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFavoriteUserUserIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteUserUserIdGet$Response(params: ApiFavoriteUserUserIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiFavoriteUserUserIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFavoriteUserUserIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteUserUserIdGet(params: ApiFavoriteUserUserIdGet$Params, context?: HttpContext): Observable<void> {
    return this.apiFavoriteUserUserIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiFavoriteAddPost()` */
  static readonly ApiFavoriteAddPostPath = '/api/Favorite/Add';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFavoriteAddPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiFavoriteAddPost$Response(params?: ApiFavoriteAddPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiFavoriteAddPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFavoriteAddPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiFavoriteAddPost(params?: ApiFavoriteAddPost$Params, context?: HttpContext): Observable<void> {
    return this.apiFavoriteAddPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiFavoriteDeleteIdDelete()` */
  static readonly ApiFavoriteDeleteIdDeletePath = '/api/Favorite/Delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFavoriteDeleteIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteDeleteIdDelete$Response(params: ApiFavoriteDeleteIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiFavoriteDeleteIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFavoriteDeleteIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteDeleteIdDelete(params: ApiFavoriteDeleteIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiFavoriteDeleteIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiFavoriteDeleteByUserBookDelete()` */
  static readonly ApiFavoriteDeleteByUserBookDeletePath = '/api/Favorite/DeleteByUserBook';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFavoriteDeleteByUserBookDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteDeleteByUserBookDelete$Response(params?: ApiFavoriteDeleteByUserBookDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiFavoriteDeleteByUserBookDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFavoriteDeleteByUserBookDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteDeleteByUserBookDelete(params?: ApiFavoriteDeleteByUserBookDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiFavoriteDeleteByUserBookDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
