/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiFavoriteGet$Json } from '../fn/favorite/api-favorite-get-json';
import { ApiFavoriteGet$Json$Params } from '../fn/favorite/api-favorite-get-json';
import { apiFavoriteGet$Plain } from '../fn/favorite/api-favorite-get-plain';
import { ApiFavoriteGet$Plain$Params } from '../fn/favorite/api-favorite-get-plain';
import { apiFavoriteIdDelete$Json } from '../fn/favorite/api-favorite-id-delete-json';
import { ApiFavoriteIdDelete$Json$Params } from '../fn/favorite/api-favorite-id-delete-json';
import { apiFavoriteIdDelete$Plain } from '../fn/favorite/api-favorite-id-delete-plain';
import { ApiFavoriteIdDelete$Plain$Params } from '../fn/favorite/api-favorite-id-delete-plain';
import { apiFavoritePost$Json } from '../fn/favorite/api-favorite-post-json';
import { ApiFavoritePost$Json$Params } from '../fn/favorite/api-favorite-post-json';
import { apiFavoritePost$Plain } from '../fn/favorite/api-favorite-post-plain';
import { ApiFavoritePost$Plain$Params } from '../fn/favorite/api-favorite-post-plain';
import { apiFavoriteUserBookDelete$Json } from '../fn/favorite/api-favorite-user-book-delete-json';
import { ApiFavoriteUserBookDelete$Json$Params } from '../fn/favorite/api-favorite-user-book-delete-json';
import { apiFavoriteUserBookDelete$Plain } from '../fn/favorite/api-favorite-user-book-delete-plain';
import { ApiFavoriteUserBookDelete$Plain$Params } from '../fn/favorite/api-favorite-user-book-delete-plain';
import { apiFavoriteUserUserIdGet$Json } from '../fn/favorite/api-favorite-user-user-id-get-json';
import { ApiFavoriteUserUserIdGet$Json$Params } from '../fn/favorite/api-favorite-user-user-id-get-json';
import { apiFavoriteUserUserIdGet$Plain } from '../fn/favorite/api-favorite-user-user-id-get-plain';
import { ApiFavoriteUserUserIdGet$Plain$Params } from '../fn/favorite/api-favorite-user-user-id-get-plain';
import { FavoriteResponseListResultCustomModel } from '../models/favorite-response-list-result-custom-model';
import { ObjectResultCustomModel } from '../models/object-result-custom-model';

@Injectable({ providedIn: 'root' })
export class FavoriteService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiFavoriteGet()` */
  static readonly ApiFavoriteGetPath = '/api/Favorite';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFavoriteGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteGet$Plain$Response(params?: ApiFavoriteGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<FavoriteResponseListResultCustomModel>> {
    return apiFavoriteGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFavoriteGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteGet$Plain(params?: ApiFavoriteGet$Plain$Params, context?: HttpContext): Observable<FavoriteResponseListResultCustomModel> {
    return this.apiFavoriteGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<FavoriteResponseListResultCustomModel>): FavoriteResponseListResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFavoriteGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteGet$Json$Response(params?: ApiFavoriteGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<FavoriteResponseListResultCustomModel>> {
    return apiFavoriteGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFavoriteGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteGet$Json(params?: ApiFavoriteGet$Json$Params, context?: HttpContext): Observable<FavoriteResponseListResultCustomModel> {
    return this.apiFavoriteGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<FavoriteResponseListResultCustomModel>): FavoriteResponseListResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiFavoritePost()` */
  static readonly ApiFavoritePostPath = '/api/Favorite';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFavoritePost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiFavoritePost$Plain$Response(params?: ApiFavoritePost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiFavoritePost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFavoritePost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiFavoritePost$Plain(params?: ApiFavoritePost$Plain$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiFavoritePost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFavoritePost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiFavoritePost$Json$Response(params?: ApiFavoritePost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiFavoritePost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFavoritePost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiFavoritePost$Json(params?: ApiFavoritePost$Json$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiFavoritePost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiFavoriteUserUserIdGet()` */
  static readonly ApiFavoriteUserUserIdGetPath = '/api/Favorite/user/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFavoriteUserUserIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteUserUserIdGet$Plain$Response(params: ApiFavoriteUserUserIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<FavoriteResponseListResultCustomModel>> {
    return apiFavoriteUserUserIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFavoriteUserUserIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteUserUserIdGet$Plain(params: ApiFavoriteUserUserIdGet$Plain$Params, context?: HttpContext): Observable<FavoriteResponseListResultCustomModel> {
    return this.apiFavoriteUserUserIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<FavoriteResponseListResultCustomModel>): FavoriteResponseListResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFavoriteUserUserIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteUserUserIdGet$Json$Response(params: ApiFavoriteUserUserIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<FavoriteResponseListResultCustomModel>> {
    return apiFavoriteUserUserIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFavoriteUserUserIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteUserUserIdGet$Json(params: ApiFavoriteUserUserIdGet$Json$Params, context?: HttpContext): Observable<FavoriteResponseListResultCustomModel> {
    return this.apiFavoriteUserUserIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<FavoriteResponseListResultCustomModel>): FavoriteResponseListResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiFavoriteIdDelete()` */
  static readonly ApiFavoriteIdDeletePath = '/api/Favorite/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFavoriteIdDelete$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteIdDelete$Plain$Response(params: ApiFavoriteIdDelete$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiFavoriteIdDelete$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFavoriteIdDelete$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteIdDelete$Plain(params: ApiFavoriteIdDelete$Plain$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiFavoriteIdDelete$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFavoriteIdDelete$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteIdDelete$Json$Response(params: ApiFavoriteIdDelete$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiFavoriteIdDelete$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFavoriteIdDelete$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteIdDelete$Json(params: ApiFavoriteIdDelete$Json$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiFavoriteIdDelete$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiFavoriteUserBookDelete()` */
  static readonly ApiFavoriteUserBookDeletePath = '/api/Favorite/user-book';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFavoriteUserBookDelete$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteUserBookDelete$Plain$Response(params?: ApiFavoriteUserBookDelete$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiFavoriteUserBookDelete$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFavoriteUserBookDelete$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteUserBookDelete$Plain(params?: ApiFavoriteUserBookDelete$Plain$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiFavoriteUserBookDelete$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFavoriteUserBookDelete$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteUserBookDelete$Json$Response(params?: ApiFavoriteUserBookDelete$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiFavoriteUserBookDelete$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFavoriteUserBookDelete$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoriteUserBookDelete$Json(params?: ApiFavoriteUserBookDelete$Json$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiFavoriteUserBookDelete$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

}
