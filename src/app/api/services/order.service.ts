/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiOrderCreatePost } from '../fn/order/api-order-create-post';
import { ApiOrderCreatePost$Params } from '../fn/order/api-order-create-post';
import { apiOrderDeleteIdDelete } from '../fn/order/api-order-delete-id-delete';
import { ApiOrderDeleteIdDelete$Params } from '../fn/order/api-order-delete-id-delete';
import { apiOrderGet } from '../fn/order/api-order-get';
import { ApiOrderGet$Params } from '../fn/order/api-order-get';
import { apiOrderUpdateStatusIdPut } from '../fn/order/api-order-update-status-id-put';
import { ApiOrderUpdateStatusIdPut$Params } from '../fn/order/api-order-update-status-id-put';
import { apiOrderUserUserIdGet } from '../fn/order/api-order-user-user-id-get';
import { ApiOrderUserUserIdGet$Params } from '../fn/order/api-order-user-user-id-get';

@Injectable({ providedIn: 'root' })
export class OrderService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiOrderGet()` */
  static readonly ApiOrderGetPath = '/api/Order';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderGet$Response(params?: ApiOrderGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiOrderGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderGet(params?: ApiOrderGet$Params, context?: HttpContext): Observable<void> {
    return this.apiOrderGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiOrderUserUserIdGet()` */
  static readonly ApiOrderUserUserIdGetPath = '/api/Order/User/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderUserUserIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderUserUserIdGet$Response(params: ApiOrderUserUserIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiOrderUserUserIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderUserUserIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderUserUserIdGet(params: ApiOrderUserUserIdGet$Params, context?: HttpContext): Observable<void> {
    return this.apiOrderUserUserIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiOrderCreatePost()` */
  static readonly ApiOrderCreatePostPath = '/api/Order/Create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderCreatePost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiOrderCreatePost$Response(params?: ApiOrderCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiOrderCreatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderCreatePost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiOrderCreatePost(params?: ApiOrderCreatePost$Params, context?: HttpContext): Observable<void> {
    return this.apiOrderCreatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiOrderUpdateStatusIdPut()` */
  static readonly ApiOrderUpdateStatusIdPutPath = '/api/Order/UpdateStatus/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderUpdateStatusIdPut()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderUpdateStatusIdPut$Response(params: ApiOrderUpdateStatusIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiOrderUpdateStatusIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderUpdateStatusIdPut$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderUpdateStatusIdPut(params: ApiOrderUpdateStatusIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiOrderUpdateStatusIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiOrderDeleteIdDelete()` */
  static readonly ApiOrderDeleteIdDeletePath = '/api/Order/Delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderDeleteIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderDeleteIdDelete$Response(params: ApiOrderDeleteIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiOrderDeleteIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderDeleteIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderDeleteIdDelete(params: ApiOrderDeleteIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiOrderDeleteIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
