/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiOrderGet$Json } from '../fn/order/api-order-get-json';
import { ApiOrderGet$Json$Params } from '../fn/order/api-order-get-json';
import { apiOrderGet$Plain } from '../fn/order/api-order-get-plain';
import { ApiOrderGet$Plain$Params } from '../fn/order/api-order-get-plain';
import { apiOrderIdDelete$Json } from '../fn/order/api-order-id-delete-json';
import { ApiOrderIdDelete$Json$Params } from '../fn/order/api-order-id-delete-json';
import { apiOrderIdDelete$Plain } from '../fn/order/api-order-id-delete-plain';
import { ApiOrderIdDelete$Plain$Params } from '../fn/order/api-order-id-delete-plain';
import { apiOrderIdGet$Json } from '../fn/order/api-order-id-get-json';
import { ApiOrderIdGet$Json$Params } from '../fn/order/api-order-id-get-json';
import { apiOrderIdGet$Plain } from '../fn/order/api-order-id-get-plain';
import { ApiOrderIdGet$Plain$Params } from '../fn/order/api-order-id-get-plain';
import { apiOrderIdStatusPut$Json } from '../fn/order/api-order-id-status-put-json';
import { ApiOrderIdStatusPut$Json$Params } from '../fn/order/api-order-id-status-put-json';
import { apiOrderIdStatusPut$Plain } from '../fn/order/api-order-id-status-put-plain';
import { ApiOrderIdStatusPut$Plain$Params } from '../fn/order/api-order-id-status-put-plain';
import { apiOrderPost$Json } from '../fn/order/api-order-post-json';
import { ApiOrderPost$Json$Params } from '../fn/order/api-order-post-json';
import { apiOrderPost$Plain } from '../fn/order/api-order-post-plain';
import { ApiOrderPost$Plain$Params } from '../fn/order/api-order-post-plain';
import { apiOrderUserUserIdGet$Json } from '../fn/order/api-order-user-user-id-get-json';
import { ApiOrderUserUserIdGet$Json$Params } from '../fn/order/api-order-user-user-id-get-json';
import { apiOrderUserUserIdGet$Plain } from '../fn/order/api-order-user-user-id-get-plain';
import { ApiOrderUserUserIdGet$Plain$Params } from '../fn/order/api-order-user-user-id-get-plain';
import { ObjectResultCustomModel } from '../models/object-result-custom-model';
import { OrderResponseListResultCustomModel } from '../models/order-response-list-result-custom-model';
import { OrderResponseResultCustomModel } from '../models/order-response-result-custom-model';
import { StringResultCustomModel } from '../models/string-result-custom-model';

@Injectable({ providedIn: 'root' })
export class OrderService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiOrderGet()` */
  static readonly ApiOrderGetPath = '/api/Order';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderGet$Plain$Response(params?: ApiOrderGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<OrderResponseListResultCustomModel>> {
    return apiOrderGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderGet$Plain(params?: ApiOrderGet$Plain$Params, context?: HttpContext): Observable<OrderResponseListResultCustomModel> {
    return this.apiOrderGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<OrderResponseListResultCustomModel>): OrderResponseListResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderGet$Json$Response(params?: ApiOrderGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<OrderResponseListResultCustomModel>> {
    return apiOrderGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderGet$Json(params?: ApiOrderGet$Json$Params, context?: HttpContext): Observable<OrderResponseListResultCustomModel> {
    return this.apiOrderGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<OrderResponseListResultCustomModel>): OrderResponseListResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiOrderPost()` */
  static readonly ApiOrderPostPath = '/api/Order';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiOrderPost$Plain$Response(params?: ApiOrderPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiOrderPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiOrderPost$Plain(params?: ApiOrderPost$Plain$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiOrderPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiOrderPost$Json$Response(params?: ApiOrderPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiOrderPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiOrderPost$Json(params?: ApiOrderPost$Json$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiOrderPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiOrderIdGet()` */
  static readonly ApiOrderIdGetPath = '/api/Order/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderIdGet$Plain$Response(params: ApiOrderIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<OrderResponseResultCustomModel>> {
    return apiOrderIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderIdGet$Plain(params: ApiOrderIdGet$Plain$Params, context?: HttpContext): Observable<OrderResponseResultCustomModel> {
    return this.apiOrderIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<OrderResponseResultCustomModel>): OrderResponseResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderIdGet$Json$Response(params: ApiOrderIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<OrderResponseResultCustomModel>> {
    return apiOrderIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderIdGet$Json(params: ApiOrderIdGet$Json$Params, context?: HttpContext): Observable<OrderResponseResultCustomModel> {
    return this.apiOrderIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<OrderResponseResultCustomModel>): OrderResponseResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiOrderIdDelete()` */
  static readonly ApiOrderIdDeletePath = '/api/Order/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderIdDelete$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderIdDelete$Plain$Response(params: ApiOrderIdDelete$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiOrderIdDelete$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderIdDelete$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderIdDelete$Plain(params: ApiOrderIdDelete$Plain$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiOrderIdDelete$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderIdDelete$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderIdDelete$Json$Response(params: ApiOrderIdDelete$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiOrderIdDelete$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderIdDelete$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderIdDelete$Json(params: ApiOrderIdDelete$Json$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiOrderIdDelete$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiOrderUserUserIdGet()` */
  static readonly ApiOrderUserUserIdGetPath = '/api/Order/user/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderUserUserIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderUserUserIdGet$Plain$Response(params: ApiOrderUserUserIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<OrderResponseListResultCustomModel>> {
    return apiOrderUserUserIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderUserUserIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderUserUserIdGet$Plain(params: ApiOrderUserUserIdGet$Plain$Params, context?: HttpContext): Observable<OrderResponseListResultCustomModel> {
    return this.apiOrderUserUserIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<OrderResponseListResultCustomModel>): OrderResponseListResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderUserUserIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderUserUserIdGet$Json$Response(params: ApiOrderUserUserIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<OrderResponseListResultCustomModel>> {
    return apiOrderUserUserIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderUserUserIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderUserUserIdGet$Json(params: ApiOrderUserUserIdGet$Json$Params, context?: HttpContext): Observable<OrderResponseListResultCustomModel> {
    return this.apiOrderUserUserIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<OrderResponseListResultCustomModel>): OrderResponseListResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiOrderIdStatusPut()` */
  static readonly ApiOrderIdStatusPutPath = '/api/Order/{id}/status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderIdStatusPut$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderIdStatusPut$Plain$Response(params: ApiOrderIdStatusPut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<StringResultCustomModel>> {
    return apiOrderIdStatusPut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderIdStatusPut$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderIdStatusPut$Plain(params: ApiOrderIdStatusPut$Plain$Params, context?: HttpContext): Observable<StringResultCustomModel> {
    return this.apiOrderIdStatusPut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<StringResultCustomModel>): StringResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderIdStatusPut$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderIdStatusPut$Json$Response(params: ApiOrderIdStatusPut$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<StringResultCustomModel>> {
    return apiOrderIdStatusPut$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderIdStatusPut$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderIdStatusPut$Json(params: ApiOrderIdStatusPut$Json$Params, context?: HttpContext): Observable<StringResultCustomModel> {
    return this.apiOrderIdStatusPut$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<StringResultCustomModel>): StringResultCustomModel => r.body)
    );
  }

}
