/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiGenreCreatePost$Json } from '../fn/genre/api-genre-create-post-json';
import { ApiGenreCreatePost$Json$Params } from '../fn/genre/api-genre-create-post-json';
import { apiGenreCreatePost$Plain } from '../fn/genre/api-genre-create-post-plain';
import { ApiGenreCreatePost$Plain$Params } from '../fn/genre/api-genre-create-post-plain';
import { apiGenreDeleteIdDelete$Json } from '../fn/genre/api-genre-delete-id-delete-json';
import { ApiGenreDeleteIdDelete$Json$Params } from '../fn/genre/api-genre-delete-id-delete-json';
import { apiGenreDeleteIdDelete$Plain } from '../fn/genre/api-genre-delete-id-delete-plain';
import { ApiGenreDeleteIdDelete$Plain$Params } from '../fn/genre/api-genre-delete-id-delete-plain';
import { apiGenreGet$Json } from '../fn/genre/api-genre-get-json';
import { ApiGenreGet$Json$Params } from '../fn/genre/api-genre-get-json';
import { apiGenreGet$Plain } from '../fn/genre/api-genre-get-plain';
import { ApiGenreGet$Plain$Params } from '../fn/genre/api-genre-get-plain';
import { apiGenreIdGet$Json } from '../fn/genre/api-genre-id-get-json';
import { ApiGenreIdGet$Json$Params } from '../fn/genre/api-genre-id-get-json';
import { apiGenreIdGet$Plain } from '../fn/genre/api-genre-id-get-plain';
import { ApiGenreIdGet$Plain$Params } from '../fn/genre/api-genre-id-get-plain';
import { apiGenreSearchGet$Json } from '../fn/genre/api-genre-search-get-json';
import { ApiGenreSearchGet$Json$Params } from '../fn/genre/api-genre-search-get-json';
import { apiGenreSearchGet$Plain } from '../fn/genre/api-genre-search-get-plain';
import { ApiGenreSearchGet$Plain$Params } from '../fn/genre/api-genre-search-get-plain';
import { apiGenreUpdateIdPut$Json } from '../fn/genre/api-genre-update-id-put-json';
import { ApiGenreUpdateIdPut$Json$Params } from '../fn/genre/api-genre-update-id-put-json';
import { apiGenreUpdateIdPut$Plain } from '../fn/genre/api-genre-update-id-put-plain';
import { ApiGenreUpdateIdPut$Plain$Params } from '../fn/genre/api-genre-update-id-put-plain';
import { GenreResponseListResultCustomModel } from '../models/genre-response-list-result-custom-model';
import { GenreResponseResultCustomModel } from '../models/genre-response-result-custom-model';
import { ObjectResultCustomModel } from '../models/object-result-custom-model';

@Injectable({ providedIn: 'root' })
export class GenreService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiGenreGet()` */
  static readonly ApiGenreGetPath = '/api/Genre';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreGet$Plain$Response(params?: ApiGenreGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<GenreResponseListResultCustomModel>> {
    return apiGenreGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreGet$Plain(params?: ApiGenreGet$Plain$Params, context?: HttpContext): Observable<GenreResponseListResultCustomModel> {
    return this.apiGenreGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<GenreResponseListResultCustomModel>): GenreResponseListResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreGet$Json$Response(params?: ApiGenreGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<GenreResponseListResultCustomModel>> {
    return apiGenreGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreGet$Json(params?: ApiGenreGet$Json$Params, context?: HttpContext): Observable<GenreResponseListResultCustomModel> {
    return this.apiGenreGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<GenreResponseListResultCustomModel>): GenreResponseListResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiGenreIdGet()` */
  static readonly ApiGenreIdGetPath = '/api/Genre/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreIdGet$Plain$Response(params: ApiGenreIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<GenreResponseResultCustomModel>> {
    return apiGenreIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreIdGet$Plain(params: ApiGenreIdGet$Plain$Params, context?: HttpContext): Observable<GenreResponseResultCustomModel> {
    return this.apiGenreIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<GenreResponseResultCustomModel>): GenreResponseResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreIdGet$Json$Response(params: ApiGenreIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<GenreResponseResultCustomModel>> {
    return apiGenreIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreIdGet$Json(params: ApiGenreIdGet$Json$Params, context?: HttpContext): Observable<GenreResponseResultCustomModel> {
    return this.apiGenreIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<GenreResponseResultCustomModel>): GenreResponseResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiGenreCreatePost()` */
  static readonly ApiGenreCreatePostPath = '/api/Genre/Create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreCreatePost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGenreCreatePost$Plain$Response(params?: ApiGenreCreatePost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiGenreCreatePost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreCreatePost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGenreCreatePost$Plain(params?: ApiGenreCreatePost$Plain$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiGenreCreatePost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreCreatePost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGenreCreatePost$Json$Response(params?: ApiGenreCreatePost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiGenreCreatePost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreCreatePost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGenreCreatePost$Json(params?: ApiGenreCreatePost$Json$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiGenreCreatePost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiGenreUpdateIdPut()` */
  static readonly ApiGenreUpdateIdPutPath = '/api/Genre/Update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreUpdateIdPut$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGenreUpdateIdPut$Plain$Response(params: ApiGenreUpdateIdPut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiGenreUpdateIdPut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreUpdateIdPut$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGenreUpdateIdPut$Plain(params: ApiGenreUpdateIdPut$Plain$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiGenreUpdateIdPut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreUpdateIdPut$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGenreUpdateIdPut$Json$Response(params: ApiGenreUpdateIdPut$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiGenreUpdateIdPut$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreUpdateIdPut$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGenreUpdateIdPut$Json(params: ApiGenreUpdateIdPut$Json$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiGenreUpdateIdPut$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiGenreDeleteIdDelete()` */
  static readonly ApiGenreDeleteIdDeletePath = '/api/Genre/Delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreDeleteIdDelete$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreDeleteIdDelete$Plain$Response(params: ApiGenreDeleteIdDelete$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiGenreDeleteIdDelete$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreDeleteIdDelete$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreDeleteIdDelete$Plain(params: ApiGenreDeleteIdDelete$Plain$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiGenreDeleteIdDelete$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreDeleteIdDelete$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreDeleteIdDelete$Json$Response(params: ApiGenreDeleteIdDelete$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiGenreDeleteIdDelete$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreDeleteIdDelete$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreDeleteIdDelete$Json(params: ApiGenreDeleteIdDelete$Json$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiGenreDeleteIdDelete$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiGenreSearchGet()` */
  static readonly ApiGenreSearchGetPath = '/api/Genre/Search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreSearchGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreSearchGet$Plain$Response(params?: ApiGenreSearchGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<GenreResponseListResultCustomModel>> {
    return apiGenreSearchGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreSearchGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreSearchGet$Plain(params?: ApiGenreSearchGet$Plain$Params, context?: HttpContext): Observable<GenreResponseListResultCustomModel> {
    return this.apiGenreSearchGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<GenreResponseListResultCustomModel>): GenreResponseListResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreSearchGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreSearchGet$Json$Response(params?: ApiGenreSearchGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<GenreResponseListResultCustomModel>> {
    return apiGenreSearchGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreSearchGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreSearchGet$Json(params?: ApiGenreSearchGet$Json$Params, context?: HttpContext): Observable<GenreResponseListResultCustomModel> {
    return this.apiGenreSearchGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<GenreResponseListResultCustomModel>): GenreResponseListResultCustomModel => r.body)
    );
  }

}
