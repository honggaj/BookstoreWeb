/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiGenreGet$Json } from '../fn/genre/api-genre-get-json';
import { ApiGenreGet$Json$Params } from '../fn/genre/api-genre-get-json';
import { apiGenreGet$Plain } from '../fn/genre/api-genre-get-plain';
import { ApiGenreGet$Plain$Params } from '../fn/genre/api-genre-get-plain';
import { apiGenreIdDelete$Json } from '../fn/genre/api-genre-id-delete-json';
import { ApiGenreIdDelete$Json$Params } from '../fn/genre/api-genre-id-delete-json';
import { apiGenreIdDelete$Plain } from '../fn/genre/api-genre-id-delete-plain';
import { ApiGenreIdDelete$Plain$Params } from '../fn/genre/api-genre-id-delete-plain';
import { apiGenreIdGet$Json } from '../fn/genre/api-genre-id-get-json';
import { ApiGenreIdGet$Json$Params } from '../fn/genre/api-genre-id-get-json';
import { apiGenreIdGet$Plain } from '../fn/genre/api-genre-id-get-plain';
import { ApiGenreIdGet$Plain$Params } from '../fn/genre/api-genre-id-get-plain';
import { apiGenreIdPut$Json } from '../fn/genre/api-genre-id-put-json';
import { ApiGenreIdPut$Json$Params } from '../fn/genre/api-genre-id-put-json';
import { apiGenreIdPut$Plain } from '../fn/genre/api-genre-id-put-plain';
import { ApiGenreIdPut$Plain$Params } from '../fn/genre/api-genre-id-put-plain';
import { apiGenrePost$Json } from '../fn/genre/api-genre-post-json';
import { ApiGenrePost$Json$Params } from '../fn/genre/api-genre-post-json';
import { apiGenrePost$Plain } from '../fn/genre/api-genre-post-plain';
import { ApiGenrePost$Plain$Params } from '../fn/genre/api-genre-post-plain';
import { apiGenreSearchGet$Json } from '../fn/genre/api-genre-search-get-json';
import { ApiGenreSearchGet$Json$Params } from '../fn/genre/api-genre-search-get-json';
import { apiGenreSearchGet$Plain } from '../fn/genre/api-genre-search-get-plain';
import { ApiGenreSearchGet$Plain$Params } from '../fn/genre/api-genre-search-get-plain';
import { GenreResponseListResultCustomModel } from '../models/genre-response-list-result-custom-model';
import { GenreResponseResultCustomModel } from '../models/genre-response-result-custom-model';
import { ObjectResultCustomModel } from '../models/object-result-custom-model';

@Injectable({ providedIn: 'root' })
export class GenreService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiGenreGet()` */
  static readonly ApiGenreGetPath = '/api/Genre';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreGet$Plain$Response(params?: ApiGenreGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<GenreResponseListResultCustomModel>> {
    return apiGenreGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreGet$Plain(params?: ApiGenreGet$Plain$Params, context?: HttpContext): Observable<GenreResponseListResultCustomModel> {
    return this.apiGenreGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<GenreResponseListResultCustomModel>): GenreResponseListResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreGet$Json$Response(params?: ApiGenreGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<GenreResponseListResultCustomModel>> {
    return apiGenreGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreGet$Json(params?: ApiGenreGet$Json$Params, context?: HttpContext): Observable<GenreResponseListResultCustomModel> {
    return this.apiGenreGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<GenreResponseListResultCustomModel>): GenreResponseListResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiGenrePost()` */
  static readonly ApiGenrePostPath = '/api/Genre';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenrePost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGenrePost$Plain$Response(params?: ApiGenrePost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiGenrePost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenrePost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGenrePost$Plain(params?: ApiGenrePost$Plain$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiGenrePost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenrePost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGenrePost$Json$Response(params?: ApiGenrePost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiGenrePost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenrePost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGenrePost$Json(params?: ApiGenrePost$Json$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiGenrePost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiGenreIdGet()` */
  static readonly ApiGenreIdGetPath = '/api/Genre/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreIdGet$Plain$Response(params: ApiGenreIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<GenreResponseResultCustomModel>> {
    return apiGenreIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreIdGet$Plain(params: ApiGenreIdGet$Plain$Params, context?: HttpContext): Observable<GenreResponseResultCustomModel> {
    return this.apiGenreIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<GenreResponseResultCustomModel>): GenreResponseResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreIdGet$Json$Response(params: ApiGenreIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<GenreResponseResultCustomModel>> {
    return apiGenreIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreIdGet$Json(params: ApiGenreIdGet$Json$Params, context?: HttpContext): Observable<GenreResponseResultCustomModel> {
    return this.apiGenreIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<GenreResponseResultCustomModel>): GenreResponseResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiGenreIdPut()` */
  static readonly ApiGenreIdPutPath = '/api/Genre/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreIdPut$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGenreIdPut$Plain$Response(params: ApiGenreIdPut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiGenreIdPut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreIdPut$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGenreIdPut$Plain(params: ApiGenreIdPut$Plain$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiGenreIdPut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreIdPut$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGenreIdPut$Json$Response(params: ApiGenreIdPut$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiGenreIdPut$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreIdPut$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGenreIdPut$Json(params: ApiGenreIdPut$Json$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiGenreIdPut$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiGenreIdDelete()` */
  static readonly ApiGenreIdDeletePath = '/api/Genre/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreIdDelete$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreIdDelete$Plain$Response(params: ApiGenreIdDelete$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiGenreIdDelete$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreIdDelete$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreIdDelete$Plain(params: ApiGenreIdDelete$Plain$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiGenreIdDelete$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreIdDelete$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreIdDelete$Json$Response(params: ApiGenreIdDelete$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiGenreIdDelete$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreIdDelete$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreIdDelete$Json(params: ApiGenreIdDelete$Json$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiGenreIdDelete$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiGenreSearchGet()` */
  static readonly ApiGenreSearchGetPath = '/api/Genre/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreSearchGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreSearchGet$Plain$Response(params?: ApiGenreSearchGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<GenreResponseListResultCustomModel>> {
    return apiGenreSearchGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreSearchGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreSearchGet$Plain(params?: ApiGenreSearchGet$Plain$Params, context?: HttpContext): Observable<GenreResponseListResultCustomModel> {
    return this.apiGenreSearchGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<GenreResponseListResultCustomModel>): GenreResponseListResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreSearchGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreSearchGet$Json$Response(params?: ApiGenreSearchGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<GenreResponseListResultCustomModel>> {
    return apiGenreSearchGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreSearchGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreSearchGet$Json(params?: ApiGenreSearchGet$Json$Params, context?: HttpContext): Observable<GenreResponseListResultCustomModel> {
    return this.apiGenreSearchGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<GenreResponseListResultCustomModel>): GenreResponseListResultCustomModel => r.body)
    );
  }

}
