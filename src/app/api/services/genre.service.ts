/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiGenreCreatePost } from '../fn/genre/api-genre-create-post';
import { ApiGenreCreatePost$Params } from '../fn/genre/api-genre-create-post';
import { apiGenreDeleteIdDelete } from '../fn/genre/api-genre-delete-id-delete';
import { ApiGenreDeleteIdDelete$Params } from '../fn/genre/api-genre-delete-id-delete';
import { apiGenreGet } from '../fn/genre/api-genre-get';
import { ApiGenreGet$Params } from '../fn/genre/api-genre-get';
import { apiGenreIdGet } from '../fn/genre/api-genre-id-get';
import { ApiGenreIdGet$Params } from '../fn/genre/api-genre-id-get';
import { apiGenreSearchGet } from '../fn/genre/api-genre-search-get';
import { ApiGenreSearchGet$Params } from '../fn/genre/api-genre-search-get';
import { apiGenreUpdateIdPut } from '../fn/genre/api-genre-update-id-put';
import { ApiGenreUpdateIdPut$Params } from '../fn/genre/api-genre-update-id-put';

@Injectable({ providedIn: 'root' })
export class GenreService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiGenreGet()` */
  static readonly ApiGenreGetPath = '/api/Genre';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreGet$Response(params?: ApiGenreGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiGenreGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreGet(params?: ApiGenreGet$Params, context?: HttpContext): Observable<void> {
    return this.apiGenreGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiGenreIdGet()` */
  static readonly ApiGenreIdGetPath = '/api/Genre/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreIdGet$Response(params: ApiGenreIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiGenreIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreIdGet(params: ApiGenreIdGet$Params, context?: HttpContext): Observable<void> {
    return this.apiGenreIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiGenreCreatePost()` */
  static readonly ApiGenreCreatePostPath = '/api/Genre/Create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreCreatePost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGenreCreatePost$Response(params?: ApiGenreCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiGenreCreatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreCreatePost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGenreCreatePost(params?: ApiGenreCreatePost$Params, context?: HttpContext): Observable<void> {
    return this.apiGenreCreatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiGenreUpdateIdPut()` */
  static readonly ApiGenreUpdateIdPutPath = '/api/Genre/Update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreUpdateIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGenreUpdateIdPut$Response(params: ApiGenreUpdateIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiGenreUpdateIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreUpdateIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGenreUpdateIdPut(params: ApiGenreUpdateIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiGenreUpdateIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiGenreDeleteIdDelete()` */
  static readonly ApiGenreDeleteIdDeletePath = '/api/Genre/Delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreDeleteIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreDeleteIdDelete$Response(params: ApiGenreDeleteIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiGenreDeleteIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreDeleteIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreDeleteIdDelete(params: ApiGenreDeleteIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiGenreDeleteIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiGenreSearchGet()` */
  static readonly ApiGenreSearchGetPath = '/api/Genre/Search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGenreSearchGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreSearchGet$Response(params?: ApiGenreSearchGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiGenreSearchGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGenreSearchGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGenreSearchGet(params?: ApiGenreSearchGet$Params, context?: HttpContext): Observable<void> {
    return this.apiGenreSearchGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
