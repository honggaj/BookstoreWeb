/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiUserChangePasswordPost } from '../fn/user/api-user-change-password-post';
import { ApiUserChangePasswordPost$Params } from '../fn/user/api-user-change-password-post';
import { apiUserCreatePost } from '../fn/user/api-user-create-post';
import { ApiUserCreatePost$Params } from '../fn/user/api-user-create-post';
import { apiUserDeleteIdDelete } from '../fn/user/api-user-delete-id-delete';
import { ApiUserDeleteIdDelete$Params } from '../fn/user/api-user-delete-id-delete';
import { apiUserGet$Json } from '../fn/user/api-user-get-json';
import { ApiUserGet$Json$Params } from '../fn/user/api-user-get-json';
import { apiUserGet$Plain } from '../fn/user/api-user-get-plain';
import { ApiUserGet$Plain$Params } from '../fn/user/api-user-get-plain';
import { apiUserIdGet$Json } from '../fn/user/api-user-id-get-json';
import { ApiUserIdGet$Json$Params } from '../fn/user/api-user-id-get-json';
import { apiUserIdGet$Plain } from '../fn/user/api-user-id-get-plain';
import { ApiUserIdGet$Plain$Params } from '../fn/user/api-user-id-get-plain';
import { apiUserSearchGet } from '../fn/user/api-user-search-get';
import { ApiUserSearchGet$Params } from '../fn/user/api-user-search-get';
import { apiUserUpdateIdPut } from '../fn/user/api-user-update-id-put';
import { ApiUserUpdateIdPut$Params } from '../fn/user/api-user-update-id-put';
import { UserResponseListResultCustomModel } from '../models/user-response-list-result-custom-model';
import { UserResponseResultCustomModel } from '../models/user-response-result-custom-model';

@Injectable({ providedIn: 'root' })
export class UserService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiUserGet()` */
  static readonly ApiUserGetPath = '/api/User';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserGet$Plain$Response(params?: ApiUserGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseListResultCustomModel>> {
    return apiUserGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserGet$Plain(params?: ApiUserGet$Plain$Params, context?: HttpContext): Observable<UserResponseListResultCustomModel> {
    return this.apiUserGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseListResultCustomModel>): UserResponseListResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserGet$Json$Response(params?: ApiUserGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseListResultCustomModel>> {
    return apiUserGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserGet$Json(params?: ApiUserGet$Json$Params, context?: HttpContext): Observable<UserResponseListResultCustomModel> {
    return this.apiUserGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseListResultCustomModel>): UserResponseListResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiUserIdGet()` */
  static readonly ApiUserIdGetPath = '/api/User/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserIdGet$Plain$Response(params: ApiUserIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseResultCustomModel>> {
    return apiUserIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserIdGet$Plain(params: ApiUserIdGet$Plain$Params, context?: HttpContext): Observable<UserResponseResultCustomModel> {
    return this.apiUserIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseResultCustomModel>): UserResponseResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserIdGet$Json$Response(params: ApiUserIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseResultCustomModel>> {
    return apiUserIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserIdGet$Json(params: ApiUserIdGet$Json$Params, context?: HttpContext): Observable<UserResponseResultCustomModel> {
    return this.apiUserIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseResultCustomModel>): UserResponseResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiUserCreatePost()` */
  static readonly ApiUserCreatePostPath = '/api/User/Create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserCreatePost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUserCreatePost$Response(params?: ApiUserCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiUserCreatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserCreatePost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUserCreatePost(params?: ApiUserCreatePost$Params, context?: HttpContext): Observable<void> {
    return this.apiUserCreatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiUserUpdateIdPut()` */
  static readonly ApiUserUpdateIdPutPath = '/api/User/Update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserUpdateIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUserUpdateIdPut$Response(params: ApiUserUpdateIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiUserUpdateIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserUpdateIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUserUpdateIdPut(params: ApiUserUpdateIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiUserUpdateIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiUserDeleteIdDelete()` */
  static readonly ApiUserDeleteIdDeletePath = '/api/User/Delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserDeleteIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserDeleteIdDelete$Response(params: ApiUserDeleteIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiUserDeleteIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserDeleteIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserDeleteIdDelete(params: ApiUserDeleteIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiUserDeleteIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiUserSearchGet()` */
  static readonly ApiUserSearchGetPath = '/api/User/Search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserSearchGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserSearchGet$Response(params?: ApiUserSearchGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiUserSearchGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserSearchGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserSearchGet(params?: ApiUserSearchGet$Params, context?: HttpContext): Observable<void> {
    return this.apiUserSearchGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiUserChangePasswordPost()` */
  static readonly ApiUserChangePasswordPostPath = '/api/User/ChangePassword';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserChangePasswordPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUserChangePasswordPost$Response(params?: ApiUserChangePasswordPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiUserChangePasswordPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserChangePasswordPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUserChangePasswordPost(params?: ApiUserChangePasswordPost$Params, context?: HttpContext): Observable<void> {
    return this.apiUserChangePasswordPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
