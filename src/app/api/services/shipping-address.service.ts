/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiShippingAddressCreatePost } from '../fn/shipping-address/api-shipping-address-create-post';
import { ApiShippingAddressCreatePost$Params } from '../fn/shipping-address/api-shipping-address-create-post';
import { apiShippingAddressDeleteIdDelete } from '../fn/shipping-address/api-shipping-address-delete-id-delete';
import { ApiShippingAddressDeleteIdDelete$Params } from '../fn/shipping-address/api-shipping-address-delete-id-delete';
import { apiShippingAddressGet } from '../fn/shipping-address/api-shipping-address-get';
import { ApiShippingAddressGet$Params } from '../fn/shipping-address/api-shipping-address-get';
import { apiShippingAddressUpdateIdPut } from '../fn/shipping-address/api-shipping-address-update-id-put';
import { ApiShippingAddressUpdateIdPut$Params } from '../fn/shipping-address/api-shipping-address-update-id-put';
import { apiShippingAddressUserUserIdGet } from '../fn/shipping-address/api-shipping-address-user-user-id-get';
import { ApiShippingAddressUserUserIdGet$Params } from '../fn/shipping-address/api-shipping-address-user-user-id-get';

@Injectable({ providedIn: 'root' })
export class ShippingAddressService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiShippingAddressGet()` */
  static readonly ApiShippingAddressGetPath = '/api/ShippingAddress';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShippingAddressGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShippingAddressGet$Response(params?: ApiShippingAddressGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiShippingAddressGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShippingAddressGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShippingAddressGet(params?: ApiShippingAddressGet$Params, context?: HttpContext): Observable<void> {
    return this.apiShippingAddressGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiShippingAddressUserUserIdGet()` */
  static readonly ApiShippingAddressUserUserIdGetPath = '/api/ShippingAddress/User/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShippingAddressUserUserIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShippingAddressUserUserIdGet$Response(params: ApiShippingAddressUserUserIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiShippingAddressUserUserIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShippingAddressUserUserIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShippingAddressUserUserIdGet(params: ApiShippingAddressUserUserIdGet$Params, context?: HttpContext): Observable<void> {
    return this.apiShippingAddressUserUserIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiShippingAddressCreatePost()` */
  static readonly ApiShippingAddressCreatePostPath = '/api/ShippingAddress/Create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShippingAddressCreatePost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShippingAddressCreatePost$Response(params?: ApiShippingAddressCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiShippingAddressCreatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShippingAddressCreatePost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShippingAddressCreatePost(params?: ApiShippingAddressCreatePost$Params, context?: HttpContext): Observable<void> {
    return this.apiShippingAddressCreatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiShippingAddressUpdateIdPut()` */
  static readonly ApiShippingAddressUpdateIdPutPath = '/api/ShippingAddress/Update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShippingAddressUpdateIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShippingAddressUpdateIdPut$Response(params: ApiShippingAddressUpdateIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiShippingAddressUpdateIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShippingAddressUpdateIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShippingAddressUpdateIdPut(params: ApiShippingAddressUpdateIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiShippingAddressUpdateIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiShippingAddressDeleteIdDelete()` */
  static readonly ApiShippingAddressDeleteIdDeletePath = '/api/ShippingAddress/Delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShippingAddressDeleteIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShippingAddressDeleteIdDelete$Response(params: ApiShippingAddressDeleteIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiShippingAddressDeleteIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShippingAddressDeleteIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShippingAddressDeleteIdDelete(params: ApiShippingAddressDeleteIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiShippingAddressDeleteIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
