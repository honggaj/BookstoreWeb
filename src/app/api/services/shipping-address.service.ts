/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiShippingAddressCreatePost$Json } from '../fn/shipping-address/api-shipping-address-create-post-json';
import { ApiShippingAddressCreatePost$Json$Params } from '../fn/shipping-address/api-shipping-address-create-post-json';
import { apiShippingAddressCreatePost$Plain } from '../fn/shipping-address/api-shipping-address-create-post-plain';
import { ApiShippingAddressCreatePost$Plain$Params } from '../fn/shipping-address/api-shipping-address-create-post-plain';
import { apiShippingAddressDeleteIdDelete$Json } from '../fn/shipping-address/api-shipping-address-delete-id-delete-json';
import { ApiShippingAddressDeleteIdDelete$Json$Params } from '../fn/shipping-address/api-shipping-address-delete-id-delete-json';
import { apiShippingAddressDeleteIdDelete$Plain } from '../fn/shipping-address/api-shipping-address-delete-id-delete-plain';
import { ApiShippingAddressDeleteIdDelete$Plain$Params } from '../fn/shipping-address/api-shipping-address-delete-id-delete-plain';
import { apiShippingAddressGet$Json } from '../fn/shipping-address/api-shipping-address-get-json';
import { ApiShippingAddressGet$Json$Params } from '../fn/shipping-address/api-shipping-address-get-json';
import { apiShippingAddressGet$Plain } from '../fn/shipping-address/api-shipping-address-get-plain';
import { ApiShippingAddressGet$Plain$Params } from '../fn/shipping-address/api-shipping-address-get-plain';
import { apiShippingAddressUpdateIdPut$Json } from '../fn/shipping-address/api-shipping-address-update-id-put-json';
import { ApiShippingAddressUpdateIdPut$Json$Params } from '../fn/shipping-address/api-shipping-address-update-id-put-json';
import { apiShippingAddressUpdateIdPut$Plain } from '../fn/shipping-address/api-shipping-address-update-id-put-plain';
import { ApiShippingAddressUpdateIdPut$Plain$Params } from '../fn/shipping-address/api-shipping-address-update-id-put-plain';
import { apiShippingAddressUserUserIdGet$Json } from '../fn/shipping-address/api-shipping-address-user-user-id-get-json';
import { ApiShippingAddressUserUserIdGet$Json$Params } from '../fn/shipping-address/api-shipping-address-user-user-id-get-json';
import { apiShippingAddressUserUserIdGet$Plain } from '../fn/shipping-address/api-shipping-address-user-user-id-get-plain';
import { ApiShippingAddressUserUserIdGet$Plain$Params } from '../fn/shipping-address/api-shipping-address-user-user-id-get-plain';
import { ObjectResultCustomModel } from '../models/object-result-custom-model';
import { ShippingAddressResponseListResultCustomModel } from '../models/shipping-address-response-list-result-custom-model';

@Injectable({ providedIn: 'root' })
export class ShippingAddressService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiShippingAddressGet()` */
  static readonly ApiShippingAddressGetPath = '/api/ShippingAddress';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShippingAddressGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShippingAddressGet$Plain$Response(params?: ApiShippingAddressGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ShippingAddressResponseListResultCustomModel>> {
    return apiShippingAddressGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShippingAddressGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShippingAddressGet$Plain(params?: ApiShippingAddressGet$Plain$Params, context?: HttpContext): Observable<ShippingAddressResponseListResultCustomModel> {
    return this.apiShippingAddressGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ShippingAddressResponseListResultCustomModel>): ShippingAddressResponseListResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShippingAddressGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShippingAddressGet$Json$Response(params?: ApiShippingAddressGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ShippingAddressResponseListResultCustomModel>> {
    return apiShippingAddressGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShippingAddressGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShippingAddressGet$Json(params?: ApiShippingAddressGet$Json$Params, context?: HttpContext): Observable<ShippingAddressResponseListResultCustomModel> {
    return this.apiShippingAddressGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ShippingAddressResponseListResultCustomModel>): ShippingAddressResponseListResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiShippingAddressUserUserIdGet()` */
  static readonly ApiShippingAddressUserUserIdGetPath = '/api/ShippingAddress/User/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShippingAddressUserUserIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShippingAddressUserUserIdGet$Plain$Response(params: ApiShippingAddressUserUserIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ShippingAddressResponseListResultCustomModel>> {
    return apiShippingAddressUserUserIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShippingAddressUserUserIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShippingAddressUserUserIdGet$Plain(params: ApiShippingAddressUserUserIdGet$Plain$Params, context?: HttpContext): Observable<ShippingAddressResponseListResultCustomModel> {
    return this.apiShippingAddressUserUserIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ShippingAddressResponseListResultCustomModel>): ShippingAddressResponseListResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShippingAddressUserUserIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShippingAddressUserUserIdGet$Json$Response(params: ApiShippingAddressUserUserIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ShippingAddressResponseListResultCustomModel>> {
    return apiShippingAddressUserUserIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShippingAddressUserUserIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShippingAddressUserUserIdGet$Json(params: ApiShippingAddressUserUserIdGet$Json$Params, context?: HttpContext): Observable<ShippingAddressResponseListResultCustomModel> {
    return this.apiShippingAddressUserUserIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ShippingAddressResponseListResultCustomModel>): ShippingAddressResponseListResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiShippingAddressCreatePost()` */
  static readonly ApiShippingAddressCreatePostPath = '/api/ShippingAddress/Create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShippingAddressCreatePost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShippingAddressCreatePost$Plain$Response(params?: ApiShippingAddressCreatePost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiShippingAddressCreatePost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShippingAddressCreatePost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShippingAddressCreatePost$Plain(params?: ApiShippingAddressCreatePost$Plain$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiShippingAddressCreatePost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShippingAddressCreatePost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShippingAddressCreatePost$Json$Response(params?: ApiShippingAddressCreatePost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiShippingAddressCreatePost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShippingAddressCreatePost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShippingAddressCreatePost$Json(params?: ApiShippingAddressCreatePost$Json$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiShippingAddressCreatePost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiShippingAddressUpdateIdPut()` */
  static readonly ApiShippingAddressUpdateIdPutPath = '/api/ShippingAddress/Update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShippingAddressUpdateIdPut$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShippingAddressUpdateIdPut$Plain$Response(params: ApiShippingAddressUpdateIdPut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiShippingAddressUpdateIdPut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShippingAddressUpdateIdPut$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShippingAddressUpdateIdPut$Plain(params: ApiShippingAddressUpdateIdPut$Plain$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiShippingAddressUpdateIdPut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShippingAddressUpdateIdPut$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShippingAddressUpdateIdPut$Json$Response(params: ApiShippingAddressUpdateIdPut$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiShippingAddressUpdateIdPut$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShippingAddressUpdateIdPut$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShippingAddressUpdateIdPut$Json(params: ApiShippingAddressUpdateIdPut$Json$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiShippingAddressUpdateIdPut$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiShippingAddressDeleteIdDelete()` */
  static readonly ApiShippingAddressDeleteIdDeletePath = '/api/ShippingAddress/Delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShippingAddressDeleteIdDelete$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShippingAddressDeleteIdDelete$Plain$Response(params: ApiShippingAddressDeleteIdDelete$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiShippingAddressDeleteIdDelete$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShippingAddressDeleteIdDelete$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShippingAddressDeleteIdDelete$Plain(params: ApiShippingAddressDeleteIdDelete$Plain$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiShippingAddressDeleteIdDelete$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShippingAddressDeleteIdDelete$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShippingAddressDeleteIdDelete$Json$Response(params: ApiShippingAddressDeleteIdDelete$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiShippingAddressDeleteIdDelete$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShippingAddressDeleteIdDelete$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShippingAddressDeleteIdDelete$Json(params: ApiShippingAddressDeleteIdDelete$Json$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiShippingAddressDeleteIdDelete$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

}
