/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiReviewBookBookIdGet$Json } from '../fn/review/api-review-book-book-id-get-json';
import { ApiReviewBookBookIdGet$Json$Params } from '../fn/review/api-review-book-book-id-get-json';
import { apiReviewBookBookIdGet$Plain } from '../fn/review/api-review-book-book-id-get-plain';
import { ApiReviewBookBookIdGet$Plain$Params } from '../fn/review/api-review-book-book-id-get-plain';
import { apiReviewGet$Json } from '../fn/review/api-review-get-json';
import { ApiReviewGet$Json$Params } from '../fn/review/api-review-get-json';
import { apiReviewGet$Plain } from '../fn/review/api-review-get-plain';
import { ApiReviewGet$Plain$Params } from '../fn/review/api-review-get-plain';
import { apiReviewIdDelete$Json } from '../fn/review/api-review-id-delete-json';
import { ApiReviewIdDelete$Json$Params } from '../fn/review/api-review-id-delete-json';
import { apiReviewIdDelete$Plain } from '../fn/review/api-review-id-delete-plain';
import { ApiReviewIdDelete$Plain$Params } from '../fn/review/api-review-id-delete-plain';
import { apiReviewIdPut$Json } from '../fn/review/api-review-id-put-json';
import { ApiReviewIdPut$Json$Params } from '../fn/review/api-review-id-put-json';
import { apiReviewIdPut$Plain } from '../fn/review/api-review-id-put-plain';
import { ApiReviewIdPut$Plain$Params } from '../fn/review/api-review-id-put-plain';
import { apiReviewPost$Json } from '../fn/review/api-review-post-json';
import { ApiReviewPost$Json$Params } from '../fn/review/api-review-post-json';
import { apiReviewPost$Plain } from '../fn/review/api-review-post-plain';
import { ApiReviewPost$Plain$Params } from '../fn/review/api-review-post-plain';
import { ObjectResultCustomModel } from '../models/object-result-custom-model';
import { ReviewResponseListResultCustomModel } from '../models/review-response-list-result-custom-model';

@Injectable({ providedIn: 'root' })
export class ReviewService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiReviewGet()` */
  static readonly ApiReviewGetPath = '/api/Review';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiReviewGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReviewGet$Plain$Response(params?: ApiReviewGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ReviewResponseListResultCustomModel>> {
    return apiReviewGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiReviewGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReviewGet$Plain(params?: ApiReviewGet$Plain$Params, context?: HttpContext): Observable<ReviewResponseListResultCustomModel> {
    return this.apiReviewGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReviewResponseListResultCustomModel>): ReviewResponseListResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiReviewGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReviewGet$Json$Response(params?: ApiReviewGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ReviewResponseListResultCustomModel>> {
    return apiReviewGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiReviewGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReviewGet$Json(params?: ApiReviewGet$Json$Params, context?: HttpContext): Observable<ReviewResponseListResultCustomModel> {
    return this.apiReviewGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReviewResponseListResultCustomModel>): ReviewResponseListResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiReviewPost()` */
  static readonly ApiReviewPostPath = '/api/Review';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiReviewPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiReviewPost$Plain$Response(params?: ApiReviewPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiReviewPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiReviewPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiReviewPost$Plain(params?: ApiReviewPost$Plain$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiReviewPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiReviewPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiReviewPost$Json$Response(params?: ApiReviewPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiReviewPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiReviewPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiReviewPost$Json(params?: ApiReviewPost$Json$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiReviewPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiReviewBookBookIdGet()` */
  static readonly ApiReviewBookBookIdGetPath = '/api/Review/book/{bookId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiReviewBookBookIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReviewBookBookIdGet$Plain$Response(params: ApiReviewBookBookIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ReviewResponseListResultCustomModel>> {
    return apiReviewBookBookIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiReviewBookBookIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReviewBookBookIdGet$Plain(params: ApiReviewBookBookIdGet$Plain$Params, context?: HttpContext): Observable<ReviewResponseListResultCustomModel> {
    return this.apiReviewBookBookIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReviewResponseListResultCustomModel>): ReviewResponseListResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiReviewBookBookIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReviewBookBookIdGet$Json$Response(params: ApiReviewBookBookIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ReviewResponseListResultCustomModel>> {
    return apiReviewBookBookIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiReviewBookBookIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReviewBookBookIdGet$Json(params: ApiReviewBookBookIdGet$Json$Params, context?: HttpContext): Observable<ReviewResponseListResultCustomModel> {
    return this.apiReviewBookBookIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReviewResponseListResultCustomModel>): ReviewResponseListResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiReviewIdPut()` */
  static readonly ApiReviewIdPutPath = '/api/Review/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiReviewIdPut$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiReviewIdPut$Plain$Response(params: ApiReviewIdPut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiReviewIdPut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiReviewIdPut$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiReviewIdPut$Plain(params: ApiReviewIdPut$Plain$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiReviewIdPut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiReviewIdPut$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiReviewIdPut$Json$Response(params: ApiReviewIdPut$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiReviewIdPut$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiReviewIdPut$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiReviewIdPut$Json(params: ApiReviewIdPut$Json$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiReviewIdPut$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiReviewIdDelete()` */
  static readonly ApiReviewIdDeletePath = '/api/Review/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiReviewIdDelete$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReviewIdDelete$Plain$Response(params: ApiReviewIdDelete$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiReviewIdDelete$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiReviewIdDelete$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReviewIdDelete$Plain(params: ApiReviewIdDelete$Plain$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiReviewIdDelete$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiReviewIdDelete$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReviewIdDelete$Json$Response(params: ApiReviewIdDelete$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ObjectResultCustomModel>> {
    return apiReviewIdDelete$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiReviewIdDelete$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReviewIdDelete$Json(params: ApiReviewIdDelete$Json$Params, context?: HttpContext): Observable<ObjectResultCustomModel> {
    return this.apiReviewIdDelete$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ObjectResultCustomModel>): ObjectResultCustomModel => r.body)
    );
  }

}
