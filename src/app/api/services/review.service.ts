/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiReviewBookBookIdGet } from '../fn/review/api-review-book-book-id-get';
import { ApiReviewBookBookIdGet$Params } from '../fn/review/api-review-book-book-id-get';
import { apiReviewCreatePost } from '../fn/review/api-review-create-post';
import { ApiReviewCreatePost$Params } from '../fn/review/api-review-create-post';
import { apiReviewDeleteIdDelete } from '../fn/review/api-review-delete-id-delete';
import { ApiReviewDeleteIdDelete$Params } from '../fn/review/api-review-delete-id-delete';
import { apiReviewGet } from '../fn/review/api-review-get';
import { ApiReviewGet$Params } from '../fn/review/api-review-get';
import { apiReviewUpdateIdPut } from '../fn/review/api-review-update-id-put';
import { ApiReviewUpdateIdPut$Params } from '../fn/review/api-review-update-id-put';

@Injectable({ providedIn: 'root' })
export class ReviewService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiReviewGet()` */
  static readonly ApiReviewGetPath = '/api/Review';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiReviewGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReviewGet$Response(params?: ApiReviewGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiReviewGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiReviewGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReviewGet(params?: ApiReviewGet$Params, context?: HttpContext): Observable<void> {
    return this.apiReviewGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiReviewBookBookIdGet()` */
  static readonly ApiReviewBookBookIdGetPath = '/api/Review/Book/{bookId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiReviewBookBookIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReviewBookBookIdGet$Response(params: ApiReviewBookBookIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiReviewBookBookIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiReviewBookBookIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReviewBookBookIdGet(params: ApiReviewBookBookIdGet$Params, context?: HttpContext): Observable<void> {
    return this.apiReviewBookBookIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiReviewCreatePost()` */
  static readonly ApiReviewCreatePostPath = '/api/Review/Create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiReviewCreatePost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiReviewCreatePost$Response(params?: ApiReviewCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiReviewCreatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiReviewCreatePost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiReviewCreatePost(params?: ApiReviewCreatePost$Params, context?: HttpContext): Observable<void> {
    return this.apiReviewCreatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiReviewUpdateIdPut()` */
  static readonly ApiReviewUpdateIdPutPath = '/api/Review/Update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiReviewUpdateIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiReviewUpdateIdPut$Response(params: ApiReviewUpdateIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiReviewUpdateIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiReviewUpdateIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiReviewUpdateIdPut(params: ApiReviewUpdateIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiReviewUpdateIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiReviewDeleteIdDelete()` */
  static readonly ApiReviewDeleteIdDeletePath = '/api/Review/Delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiReviewDeleteIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReviewDeleteIdDelete$Response(params: ApiReviewDeleteIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiReviewDeleteIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiReviewDeleteIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiReviewDeleteIdDelete(params: ApiReviewDeleteIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiReviewDeleteIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
