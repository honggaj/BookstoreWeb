/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiBookCreatePost } from '../fn/book/api-book-create-post';
import { ApiBookCreatePost$Params } from '../fn/book/api-book-create-post';
import { apiBookDeleteIdDelete } from '../fn/book/api-book-delete-id-delete';
import { ApiBookDeleteIdDelete$Params } from '../fn/book/api-book-delete-id-delete';
import { apiBookGet } from '../fn/book/api-book-get';
import { ApiBookGet$Params } from '../fn/book/api-book-get';
import { apiBookIdGet } from '../fn/book/api-book-id-get';
import { ApiBookIdGet$Params } from '../fn/book/api-book-id-get';
import { apiBookSearchGet } from '../fn/book/api-book-search-get';
import { ApiBookSearchGet$Params } from '../fn/book/api-book-search-get';
import { apiBookUpdateIdPut } from '../fn/book/api-book-update-id-put';
import { ApiBookUpdateIdPut$Params } from '../fn/book/api-book-update-id-put';

@Injectable({ providedIn: 'root' })
export class BookService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiBookGet()` */
  static readonly ApiBookGetPath = '/api/Book';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiBookGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiBookGet$Response(params?: ApiBookGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiBookGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiBookGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiBookGet(params?: ApiBookGet$Params, context?: HttpContext): Observable<void> {
    return this.apiBookGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiBookIdGet()` */
  static readonly ApiBookIdGetPath = '/api/Book/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiBookIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiBookIdGet$Response(params: ApiBookIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiBookIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiBookIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiBookIdGet(params: ApiBookIdGet$Params, context?: HttpContext): Observable<void> {
    return this.apiBookIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiBookCreatePost()` */
  static readonly ApiBookCreatePostPath = '/api/Book/Create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiBookCreatePost()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiBookCreatePost$Response(params?: ApiBookCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiBookCreatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiBookCreatePost$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiBookCreatePost(params?: ApiBookCreatePost$Params, context?: HttpContext): Observable<void> {
    return this.apiBookCreatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiBookUpdateIdPut()` */
  static readonly ApiBookUpdateIdPutPath = '/api/Book/Update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiBookUpdateIdPut()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiBookUpdateIdPut$Response(params: ApiBookUpdateIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiBookUpdateIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiBookUpdateIdPut$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiBookUpdateIdPut(params: ApiBookUpdateIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiBookUpdateIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiBookDeleteIdDelete()` */
  static readonly ApiBookDeleteIdDeletePath = '/api/Book/Delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiBookDeleteIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiBookDeleteIdDelete$Response(params: ApiBookDeleteIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiBookDeleteIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiBookDeleteIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiBookDeleteIdDelete(params: ApiBookDeleteIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiBookDeleteIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiBookSearchGet()` */
  static readonly ApiBookSearchGetPath = '/api/Book/Search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiBookSearchGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiBookSearchGet$Response(params?: ApiBookSearchGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiBookSearchGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiBookSearchGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiBookSearchGet(params?: ApiBookSearchGet$Params, context?: HttpContext): Observable<void> {
    return this.apiBookSearchGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
