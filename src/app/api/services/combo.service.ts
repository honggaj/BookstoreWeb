/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiComboCreatePost } from '../fn/combo/api-combo-create-post';
import { ApiComboCreatePost$Params } from '../fn/combo/api-combo-create-post';
import { apiComboDeleteIdDelete } from '../fn/combo/api-combo-delete-id-delete';
import { ApiComboDeleteIdDelete$Params } from '../fn/combo/api-combo-delete-id-delete';
import { apiComboGet$Json } from '../fn/combo/api-combo-get-json';
import { ApiComboGet$Json$Params } from '../fn/combo/api-combo-get-json';
import { apiComboGet$Plain } from '../fn/combo/api-combo-get-plain';
import { ApiComboGet$Plain$Params } from '../fn/combo/api-combo-get-plain';
import { apiComboIdGet$Json } from '../fn/combo/api-combo-id-get-json';
import { ApiComboIdGet$Json$Params } from '../fn/combo/api-combo-id-get-json';
import { apiComboIdGet$Plain } from '../fn/combo/api-combo-id-get-plain';
import { ApiComboIdGet$Plain$Params } from '../fn/combo/api-combo-id-get-plain';
import { apiComboUpdateIdPut } from '../fn/combo/api-combo-update-id-put';
import { ApiComboUpdateIdPut$Params } from '../fn/combo/api-combo-update-id-put';
import { ComboResponseListResultCustomModel } from '../models/combo-response-list-result-custom-model';
import { ComboResponseResultCustomModel } from '../models/combo-response-result-custom-model';

@Injectable({ providedIn: 'root' })
export class ComboService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiComboGet()` */
  static readonly ApiComboGetPath = '/api/Combo';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiComboGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiComboGet$Plain$Response(params?: ApiComboGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ComboResponseListResultCustomModel>> {
    return apiComboGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiComboGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiComboGet$Plain(params?: ApiComboGet$Plain$Params, context?: HttpContext): Observable<ComboResponseListResultCustomModel> {
    return this.apiComboGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ComboResponseListResultCustomModel>): ComboResponseListResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiComboGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiComboGet$Json$Response(params?: ApiComboGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ComboResponseListResultCustomModel>> {
    return apiComboGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiComboGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiComboGet$Json(params?: ApiComboGet$Json$Params, context?: HttpContext): Observable<ComboResponseListResultCustomModel> {
    return this.apiComboGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ComboResponseListResultCustomModel>): ComboResponseListResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiComboCreatePost()` */
  static readonly ApiComboCreatePostPath = '/api/Combo/Create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiComboCreatePost()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiComboCreatePost$Response(params?: ApiComboCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiComboCreatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiComboCreatePost$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiComboCreatePost(params?: ApiComboCreatePost$Params, context?: HttpContext): Observable<void> {
    return this.apiComboCreatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiComboIdGet()` */
  static readonly ApiComboIdGetPath = '/api/Combo/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiComboIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiComboIdGet$Plain$Response(params: ApiComboIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ComboResponseResultCustomModel>> {
    return apiComboIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiComboIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiComboIdGet$Plain(params: ApiComboIdGet$Plain$Params, context?: HttpContext): Observable<ComboResponseResultCustomModel> {
    return this.apiComboIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ComboResponseResultCustomModel>): ComboResponseResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiComboIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiComboIdGet$Json$Response(params: ApiComboIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ComboResponseResultCustomModel>> {
    return apiComboIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiComboIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiComboIdGet$Json(params: ApiComboIdGet$Json$Params, context?: HttpContext): Observable<ComboResponseResultCustomModel> {
    return this.apiComboIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ComboResponseResultCustomModel>): ComboResponseResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiComboUpdateIdPut()` */
  static readonly ApiComboUpdateIdPutPath = '/api/Combo/Update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiComboUpdateIdPut()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiComboUpdateIdPut$Response(params: ApiComboUpdateIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiComboUpdateIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiComboUpdateIdPut$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiComboUpdateIdPut(params: ApiComboUpdateIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiComboUpdateIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiComboDeleteIdDelete()` */
  static readonly ApiComboDeleteIdDeletePath = '/api/Combo/Delete{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiComboDeleteIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiComboDeleteIdDelete$Response(params: ApiComboDeleteIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiComboDeleteIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiComboDeleteIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiComboDeleteIdDelete(params: ApiComboDeleteIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiComboDeleteIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
