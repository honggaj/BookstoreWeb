import { Component } from '@angular/core';
import { BookResponse, FavoriteResponse } from '../../../api/models';
import { FavoriteService } from '../../../api/services';
import { Router } from '@angular/router';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-favorite',
  standalone: false,
  templateUrl: './favorite.component.html',
  styleUrl: './favorite.component.css'
})
export class FavoriteComponent {
  favorites: FavoriteResponse[] = [];

  constructor(private favoriteService: FavoriteService, private router: Router) {}

  ngOnInit(): void {
    const userStr = localStorage.getItem('user');
    const user = userStr ? JSON.parse(userStr) : null;

    if (!user) {
      Swal.fire({
        icon: 'info',
        title: 'Ch∆∞a ƒëƒÉng nh·∫≠p',
        text: 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem danh s√°ch y√™u th√≠ch!'
      });
      return;
    }

    this.favoriteService.apiFavoriteUserUserIdGet$Json({ userId: user.userId }).subscribe(res => {
      this.favorites = res.data ?? [];
    });
  }

  goToDetail(bookId: number): void {
    this.router.navigate(['/user/book-detail', bookId]);
  }

  addToCart(book: BookResponse): void {
    const user = localStorage.getItem('user');
    const username = user ? JSON.parse(user).username : null;
    const cartKey = username ? `cart_${username}` : 'cart_guest';

    const cart = JSON.parse(localStorage.getItem(cartKey) || '[]');

    // N·∫øu ƒë√£ c√≥ bookId th√¨ tƒÉng s·ªë l∆∞·ª£ng
    const existing = cart.find((item: any) => item.bookId === book.bookId);
    if (existing) {
      existing.quantity = (existing.quantity ?? 1) + 1;
    } else {
      cart.push({ ...book, quantity: 1 });
    }

    localStorage.setItem(cartKey, JSON.stringify(cart));
    window.dispatchEvent(new Event('storage')); // üî• C·∫≠p nh·∫≠t s·ªë gi·ªè h√†ng tr√™n header

    Swal.fire({
      icon: 'success',
      title: 'ƒê√£ th√™m v√†o gi·ªè h√†ng',
      text: 'S·∫£n ph·∫©m c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè üõí'
    });
  }

  removeFromFavorite(bookId: number): void {
    Swal.fire({
      icon: 'warning',
      title: 'X√°c nh·∫≠n xo√°',
      text: 'B·∫°n c√≥ ch·∫Øc mu·ªën xo√° kh·ªèi danh s√°ch y√™u th√≠ch?',
      showCancelButton: true,
      confirmButtonText: 'Xo√°',
      cancelButtonText: 'Hu·ª∑'
    }).then(result => {
      if (result.isConfirmed) {
        this.favoriteService.apiFavoriteUserBookDelete$Json({
          userId: JSON.parse(localStorage.getItem('user')!).userId,
          bookId
        }).subscribe({
          next: () => {
            this.favorites = this.favorites.filter(f => f.bookId !== bookId);
            Swal.fire({
              icon: 'success',
              title: 'ƒê√£ xo√°',
              text: 'S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c xo√° kh·ªèi danh s√°ch y√™u th√≠ch'
            });
          },
          error: () => {
            Swal.fire({
              icon: 'error',
              title: 'L·ªói',
              text: 'C√≥ l·ªói khi xo√° kh·ªèi danh s√°ch y√™u th√≠ch'
            });
          }
        });
      }
    });
  }
}
